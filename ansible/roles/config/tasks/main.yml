---
- name: determine base control-builder path
  set_fact:
    cluster_builder_dir: "{{ playbook_dir | replace('/ansible', '') }}"
  when: cluster_pkg_folder is undefined
  run_once: true

- debug: var=cluster_builder_dir
  when: cluster_pkg_folder is undefined
  run_once: true

- name: determine cluster_pkg_folder
  set_fact:
    cluster_pkg_folder: "{{ inventory_dir | replace(cluster_builder_dir + '/clusters/', '') }}"
  when: cluster_pkg_folder is undefined
  run_once: true

- debug: var=cluster_pkg_folder
  run_once: true

- name: determine FQDN node name
  set_fact:
    node_fqdn: "{{ inventory_hostname | replace('.' + network_dn, '') + '.' + network_dn}}"
  when: network_dn is defined

- name: calculated FQDN node host name
  debug: var=node_fqdn
  when: network_dn is defined

- name: determine simple node name
  set_fact:
    node_hostname: "{{ inventory_hostname | replace('.' + network_dn, '') }}"
  when: network_dn is defined

- name: calculated simple node host name
  debug: var=node_hostname
  when: network_dn is defined

- name: set default platform to linux
  set_fact:
    platform: "linux"
  run_once: true

- name: determine if platform is macOS
  local_action:
    module: shell
    _raw_params: "uname -ra | grep Darwin | wc -l | xargs"
  become: false
  run_once: true
  register: platform_is_darwin
    
- name: set platform fact when macOS
  set_fact:
    platform: "darwin"
  when: platform_is_darwin.stdout == "1"
  run_once: true

- name: determine if platform is Windows
  local_action:
    module: shell
    _raw_params: "uname -ra | grep Microsoft | wc -l | xargs"
  become: false
  run_once: true
  register: platform_is_windows
    
- name: set platform fact when Windows
  set_fact:
    platform: "windows"
  when: platform_is_windows.stdout == "1"
  run_once: true

- name: platform
  debug: var=platform
  run_once: true

- name: calculate VM folder names for Windows
  set_fact:
    vm_folder_name: "{{ inventory_hostname }}"
  when: platform == "windows"

- name: calculate VM folder names for macOS
  set_fact:
    vm_folder_name: "{{ inventory_hostname }}.vmwarevm"
  when: platform == "darwin"

- name: calculate VM folder names for Linux
  set_fact:
    vm_folder_name: "{{ inventory_hostname }}"
  when: platform == "linux"

- name: set overwrite_existing_vms default
  set_fact:
    overwrite_existing_vms: false
  when: overwrite_existing_vms is undefined

- name: set ovftool_parallel default
  set_fact:
    ovftool_parallel: false
  when: ovftool_parallel is undefined

- name: set primary_network_device default
  set_fact:
    primary_network_device: "ens33"
  run_once: true
  when: primary_network_device is undefined

- debug: msg="primary_network_device = {{ primary_network_device }}"
  run_once: true  

- name: set pod_readiness_timeout
  set_fact:
    pod_readiness_timeout: 600s
  run_once: true
  when: pod_readiness_timeout is undefined

- debug: msg="pod_readiness_timeout = {{ pod_readiness_timeout }}"
  run_once: true  

- name: set target_dest_folder
  set_fact:
    target_dest_folder: /root
  run_once: true
  when: remote_user == 'root'

- name: set target_dest_folder
  set_fact:
    target_dest_folder: /home/{{ remote_user }}
  run_once: true
  when: remote_user != 'root'

- debug: msg="target_dest_folder = {{ target_dest_folder }}"
  run_once: true  

- name: set canal_version
  set_fact:
    canal_version: 3.30.2
  run_once: true
  when: canal_version is undefined

- debug: msg="canal_version = {{ canal_version }}"
  run_once: true  

- name: set install_package_longhorn
  set_fact:
    install_package_longhorn: false
  run_once: true
  when: install_package_longhorn is undefined

- debug: msg="install_package_longhorn = {{ install_package_longhorn }}"
  run_once: true  

- name: set longhorn_version
  set_fact:
    longhorn_version: 1.9.1
  run_once: true
  when: longhorn_version is undefined

- debug: msg="longhorn_version = {{ longhorn_version }}"
  run_once: true  

- name: set install_package_nginx
  set_fact:
    install_package_nginx: true
  run_once: true
  when: install_package_nginx is undefined

- debug: msg="install_package_nginx = {{ install_package_nginx }}"
  run_once: true  

- name: set nginx_version
  set_fact:
    nginx_version: 1.13.0
  run_once: true
  when: nginx_version is undefined

- debug: msg="nginx_version = {{ nginx_version }}"
  run_once: true  

- name: set install_package_metallb
  set_fact:
    install_package_metallb: true
  run_once: true
  when: install_package_metallb is undefined

- debug: msg="install_package_metallb = {{ install_package_metallb }}"
  run_once: true  

- name: set metallb_version
  set_fact:
    metallb_version: 0.15.2
  run_once: true
  when: metallb_version is undefined

- debug: msg="metallb_version = {{ metallb_version }}"
  run_once: true  

- name: set install_package_dashboard
  set_fact:
    install_package_dashboard: true
  run_once: true
  when: install_package_dashboard is undefined

- debug: msg="install_package_dashboard = {{ install_package_dashboard }}"
  run_once: true  

- name: set k8s_version
  set_fact:
    k8s_version: 1.33.0
  run_once: true
  when: k8s_version is undefined

- debug: msg="k8s_version = {{ k8s_version }}"
  run_once: true  

- name: set k8s_version_minor
  set_fact:
    k8s_version_minor: "{{ k8s_version | regex_replace(\"\\.[^.]*$\", '') }}"
  run_once: true
  when: k8s_version_minor is undefined

- debug: msg="k8s_version_minor = {{ k8s_version_minor }}"
  run_once: true  

