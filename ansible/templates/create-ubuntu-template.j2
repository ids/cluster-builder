#! /bin/bash

INIT_VMID={{ build_vmid }}
FINAL_VMID={{ template_vmid }}
BASE_CLUSTER_VMID={{ base_cluster_vmid }}

STORAGE=local-lvm

IMG_FILE=noble-server-cloudimg-amd64.img

set -x

if [ ! -f $IMG_FILE ]; then
  echo
  echo "Downloading Ubuntu 24.04 Img file"
  wget -qN https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img
  qemu-img resize noble-server-cloudimg-amd64.img 128G
fi

qm destroy $INIT_VMID
qm destroy $FINAL_VMID

qm create $INIT_VMID --name "ubuntu-2404-template" --ostype l26 \
    --memory 2048 --balloon 0 \
    --agent 1 \
    --bios ovmf --machine q35 --efidisk0 $STORAGE:0,pre-enrolled-keys=0 \
    --cpu host --cores 2 --numa 1 \
    --vga serial0 --serial0 socket  \
    --net0 virtio,bridge=vmbr0,mtu=1
qm importdisk $INIT_VMID noble-server-cloudimg-amd64.img $STORAGE
qm set $INIT_VMID --scsihw virtio-scsi-pci --virtio0 $STORAGE:vm-$INIT_VMID-disk-1,discard=on
qm set $INIT_VMID --boot order=virtio0
qm set $INIT_VMID --ide2 $STORAGE:cloudinit

mkdir -p /var/lib/vz/snippets
cat << EOF | tee /var/lib/vz/snippets/ubuntu.yaml
#cloud-config

package_update: true
package_upgrade: false
package_reboot_if_required: true

packages:
    - nano
    - net-tools
    - unzip
    - bind-utils 
    - python3 
    - python3-devel 
    - python3-pip 
    - libffi-devel 
    - openssl-devel 
    - gcc 
    - open-iscsi
    - ca-certificates
    - gnupg
    - lsb-release
write_files:
  - content: |
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
    path: /etc/sysctl.d/k8s.conf
    permissions: '0644'
  - content: |
        overlay
        br_netfilter
    path: /etc/modules-load.d/k8s.conf
    permissions: '0644'
#scripts-user:
#  - /usr/local/bin/k8sprep
runcmd:
    - apt install -y qemu-guest-agent
    - apt update
    - apt install -y software-properties-common apt-transport-https 
    - add-apt-repository --yes --update ppa:ansible/ansible
    - apt install -y ansible
    - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    - chmod 700 get_helm.sh
    - ./get_helm.sh
    - install -m 0755 -d /etc/apt/keyrings
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    - chmod a+r /etc/apt/keyrings/docker.asc
    - echo  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "noble") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    - apt-get update
    - apt install -y docker-ce docker-ce-cli containerd.io
    - mkdir -p /etc/containerd
    - containerd config default | tee /etc/containerd/config.toml
    - sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml
    - systemctl enable containerd
    - swapoff -a
    - sed -e '/swap/s/^/#/g' -i /etc/fstab
    - mkdir -p -m 755 /etc/apt/keyrings
    - curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    - echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list
    - apt-get update
    - apt-get install -y kubelet kubeadm kubectl
    - apt-mark hold kubelet kubeadm kubectl
    - systemctl enable ssh
    - shutdown now
# Taken from https://forum.proxmox.com/threads/combining-custom-cloud-init-with-auto-generated.59008/page-3#post-428772
EOF

qm set $INIT_VMID --cicustom "vendor=local:snippets/ubuntu.yaml"
qm set $INIT_VMID --ciuser root
qm set $INIT_VMID --sshkeys ~/.ssh/authorized_keys
qm set $INIT_VMID --ipconfig0 ip=dhcp
qm template $INIT_VMID

qm clone $INIT_VMID $FINAL_VMID
qm set $FINAL_VMID --name "cluster-node-template"
qm start $FINAL_VMID
qm wait $FINAL_VMID

qm destroy $INIT_VMID

echo "The Cluster Node Template Completed!"
