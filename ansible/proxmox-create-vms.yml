---
- hosts: k8s_masters:k8s_workers
  remote_user: root
  gather_facts: false
  vars:
    proxmox_storage: local-lvm
  roles:
    - role: config
  tasks:
    - name: verify the cluster is not protected
      fail:
        msg: "This cluster is marked as 'cluster_protected' and can not be re-deployed!"
      when: cluster_protected is defined
    
    - name: stop existing vm
      ignore_errors: true
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm stop {{ vmid }} 

    - name: unlock existing vm
      ignore_errors: true
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm unlock {{ vmid }} 

    - name: destroy existing vm
      ignore_errors: true
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm destroy {{ vmid }}

- hosts: k8s_masters:k8s_workers
  remote_user: root
  gather_facts: false
  serial: 1
  tasks:
    - debug: msg="cloning the template for {{ inventory_hostname }}"

    - name: clone the template
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm clone {{ template_vmid }} {{ vmid }} --full --storage {{ proxmox_storage }}

    - name: set the node name
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm set {{ vmid }} --name {{ inventory_hostname }}

    - name: set the static ip for the node
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm set {{ vmid }} --ipconfig0 'ip={{ ansible_host }}/24,gw={{ network_gateway }}'

    - name: configure the node vm CPU
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm set {{ vmid }} --cores {{ numvcpus }}

    - name: configure the node network nameserver
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm set {{ vmid }} --nameserver '8.8.8.8' 

    - name: configure the node vm memory
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm set {{ vmid }} --memory {{ memsize }}

# removed cloud init from template after initial build, rebuild template to update software between
# cluster builds
#
 #   - name: start the vm for cloud-init regen
 #     local_action:
 #       module: shell
 #       _raw_params: > 
 #         ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
 #         qm start {{ vmid }} 
 #     when: cluster_protected is undefined

 #   - name: wait before waiting
 #     pause:
 #         seconds: 15
 #     when: cluster_protected is undefined

  #  - name: wait for the node cloud-init to complete and shutdown
  #    ignore_errors: true
  #    local_action:
  #      module: shell
  #      _raw_params: > 
  #        ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
  #        qm wait {{ vmid }} 
  #    when: cluster_protected is undefined

  #  - name: wait before starting again
  #    pause:
  #        seconds: 10
  #    when: cluster_protected is undefined

    - name: start the node
      ignore_errors: true
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm start {{ vmid }} 

    - name: give the node 5 seconds to boot
      pause:
          seconds: 5

    - name: list the running vms
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm list 
      register: vm_list
    
    - debug: msg="{{ vm_list.stdout_lines }}"


