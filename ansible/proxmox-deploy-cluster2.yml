---
- hosts: k8s_masters:k8s_workers
  remote_user: root
  gather_facts: false
  serial: 1
  tasks:
    - name: stop and destroy existing vm
      ignore_errors: true
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm stop {{ vmid }} && qm destroy {{ vmid }}
    
    - name: clone the template
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm clone {{ template_vmid }} {{ vmid }}

    - name: set the node name
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm set {{ vmid }} --name {{ hostvars[node].inventory_hostname }}

    - name: set the static ip for the node
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm set {{ vmidcount }} --ipconfig0 'ip={{ hostvars[node].ansible_host }}/24,gw={{ network_gateway }}'

    - name: configure the node vm CPU
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm set {{ vmid }} --cores {{ hostvars[node].numvcpus }}

    - name: configure the node vm memory
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm set {{ vmid }} --memory {{ hostvars[node].memsize }}

    - name: configure the node network nameserver
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm set {{ vmid }} --nameserver '{{ network_dns }} {{ network_dns2 }}'

    - name: start the vm for cloud-init regen
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm start {{ vmid }} 

    - name: wait for the node cloud-init to complete and shutdown
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm wait {{ vmid }} 

    - name: start the node
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm start {{ vmid }} 

    - name: list the running vms
      local_action:
        module: shell
        _raw_params: > 
          ssh -o LogLevel=Error -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ proxmox_user }}@{{ proxmox_host }} 
          qm list 
      register: vm_list
    
    - debug: msg="{{ vm_list.stdout }}"


