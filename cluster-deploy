#!/bin/bash
INVENTORY_FILE=$1
SERVER_WAIT=90s
REMOTE_USER=root

export ANSIBLE_DISPLAY_SKIPPED_HOSTS=false
export ANSIBLE_CONFIG=./ansible.cfg

function desktop_deploy () {

  echo "Validating SUDO session (Enter local SUDO password for VMware network management if prompted)"
  sudo date

  echo "Creating the ${VIRT_APP} VMs and configuring the network for static IP assignment..."
  ansible-playbook -i $INVENTORY_FILE ansible/desktop-create-vms.yml --extra-vars "ova_template=${OVA_TEMPLATE_FILE} cluster_pkg_folder='${CLUSTER_PKG_FOLDER}' cluster_type=${CLUSTER_TYPE}"
  if [ $? -ne 0 ]; then
    echo "There was a problem creating the VMs"
    exit 1
  fi
  
  echo "Configuring the ${CLUSTER_TYPE_NAME} Cluster..."
  ansible-playbook -i $INVENTORY_FILE ansible/$CLUSTER_TYPE.yml --extra-vars="cluster_pkg_folder=${CLUSTER_PKG_FOLDER} cluster_type=${CLUSTER_TYPE}"
  if [ $? -ne 0 ]; then
    echo "FAIL: ${VIRT_APP} ${CLUSTER_TYPE_NAME} creation failed!"
    exit 1
  fi

  if [ -f clusters/$CLUSTER_PKG_FOLDER/test-cluster ]; then
    bash clusters/$CLUSTER_PKG_FOLDER/test-cluster
  fi 

  echo -e "${TC}------------------------------------------------------------${NC}"
  echo "${EMOJI}SUCCESS: ${VIRT_APP} ${CLUSTER_TYPE_NAME}!"

}

function proxmox_deploy () {

  if [ "$BUILD_TEMPLATE" == "true" ]; then
    echo "Deploying the Proxmox VM Template..."
    ansible-playbook -i $INVENTORY_FILE ansible/proxmox-deploy-template.yml --extra-vars "cluster_pkg_folder='${CLUSTER_PKG_FOLDER}' cluster_type=${CLUSTER_TYPE}"
    if [ $? -ne 0 ]; then
      echo "There was a problem deploying the VM Template to Proxmox VE"
      exit 1
    fi
  fi

  echo "Creating the Proxmox VMs and configuring the network for static IP assignment..."
  ansible-playbook -i $INVENTORY_FILE ansible/proxmox-create-vms.yml --extra-vars "cluster_pkg_folder='${CLUSTER_PKG_FOLDER}' cluster_type=${CLUSTER_TYPE}"
  if [ $? -ne 0 ]; then
    echo "There was a problem creating the VM cluster in Proxmox VE"
    exit 1
  fi

  echo "Configuring the ${CLUSTER_TYPE_NAME} Cluster..."
  ansible-playbook -i $INVENTORY_FILE ansible/$CLUSTER_TYPE.yml --extra-vars="cluster_pkg_folder=${CLUSTER_PKG_FOLDER} cluster_type=${CLUSTER_TYPE}"
  if [ $? -ne 0 ]; then
    echo "FAIL: ${CLUSTER_TYPE_NAME} creation failed!"
    exit 1
  fi

  if [ -f clusters/$CLUSTER_PKG_FOLDER/test-cluster ]; then
    bash clusters/$CLUSTER_PKG_FOLDER/test-cluster
  fi 

  echo -e "${TC}------------------------------------------------------------${NC}"
  echo "${EMOJI}SUCCESS: ${CLUSTER_TYPE_NAME}!"

}

function cluster_info_display() {

  echo
  echo -e "${TC}-----------------------------------------------------------------------------------${NC}"
  echo -e "${EMOJI}Cluster Builder Deployment"
  echo -e "${TC}-----------------------------------------------------------------------------------${NC}"
  echo -e " Cluster Name    : ${TC}${CLUSTER_NAME}${NC}"
  echo -e " Cluster Package : ${TC}${CLUSTER_PKG_FOLDER}${NC}"
  echo -e " Cluster Type    : ${TC}${CLUSTER_TYPE} - ${CLUSTER_TYPE_NAME}${NC}"
if [[ $DEPLOY_TARGET != "proxmox" ]]; then 
  echo -e " OVA Template    : ${TC}${OVA_TEMPLATE_FILE}${NC}"
fi
  echo -e " Deploy Target   : ${TC}${DEPLOY_TARGET}${NC}"
  echo -e "${TC}-----------------------------------------------------------------------------------${NC}"
  echo

}

PLATFORM=`uname -ra`
VIRT_APP="VMware Workstation"
if [[ $PLATFORM == *"Microsoft"* ]]; then 
  VIRT_APP="VMware Fusion"
  export ANSIBLE_CONFIG=$PWD/ansible.cfg
elif [[ $PLATFORM == *"Darwin"* ]]; then
  VIRT_APP="VMware Fusion"
fi

if [ -z "${INVENTORY_FILE}" ]; then
  read -s "Enter the target cluster folder: " INVENTORY_FILE
fi

INVENTORY_FILE=./clusters/$INVENTORY_FILE/hosts

if [ ! -f $INVENTORY_FILE ]; then
  echo
  echo "Unable to find inventory file @: ${INVENTORY_FILE}"
  exit 1
fi

CLUSTER_TYPE=`sed -n '/^cluster_type=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
BUILD_TEMPLATE=`sed -n '/^build_template=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
DEPLOY_TARGET=`sed -n '/^deploy_target=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
CLUSTER_NAME=`sed -n '/^cluster_name=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
REMOTE_USER=`sed -n '/^remote_user=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
CLUSTER_PROTECTED=`sed -n '/^protected=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
K8S_VERSION=`sed -n '/^k8s_version=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
K8S_CRI=`sed -n '/^k8s_container_runtime=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`
K8S_CNI=`sed -n '/^k8s_network_cni=/ {s///p;q;}' $INVENTORY_FILE | tr -d '\n' | tr -d '\r'`

if [ "$CLUSTER_PROTECTED" == "true" ]; then
  echo
  echo -e "${TC}Deployment Blocked!${NC}"
  echo "The cluster has been marked protected=true" 
  echo
  echo "To redeploy the cluster ${CLUSTER_NAME} (destroying any existing instance), "
  echo "remove this flag from the ${CLUSTER_PKG_FOLDER}/hosts file."
  echo
  exit 1
fi  

CLUSTER_PKG_PATH=`dirname $INVENTORY_FILE`
CLUSTER_PKG_FOLDER=${CLUSTER_PKG_PATH//.\/clusters\//} 

if [ -f clusters/$CLUSTER_PKG_FOLDER/.passwords ]; then
  source clusters/$CLUSTER_PKG_FOLDER/.passwords
fi

TEMP_SCRIPT_PATH=./tmp/$CLUSTER_PKG_FOLDER
if [ "$DEPLOY_TARGET" == "proxmox" ]; then
  CLUSTER_TYPE_NAME='Proxmox VE Ubuntu 24.04 Kubernetes'
else
  OVA_TEMPLATE_FILE=node-packer/output_ovas/cluster-node-x86_64.ova
  CLUSTER_TYPE_NAME='Rocky 9.4 Kubernetes'
fi

TC=''
NC=''
EMOJI=''
if [ "$TERM" == "xterm-256color" ]; then
  TC='\033[1;34m'
  NC='\033[0m' # No Color
  EMOJI='ðŸ‘· '
fi 

cluster_info_display

START_TIME=$SECONDS

if [ "$DEPLOY_TARGET" != "proxmox" ]; then
  if [ ! -f $OVA_TEMPLATE_FILE ]; then
    echo "Unable to locate template file @: ${OVA_TEMPLATE_FILE}"
    echo "Attempting to build: ${OVA_BUILD_TYPE}"
    cd node-packer
    bash build 
    cd ..
  fi

  if [ ! -f $OVA_TEMPLATE_FILE ]; then
    echo "Unable to build template ova: ${OVA_BUILD_TYPE}"
    exit 1
  fi

  desktop_deploy
else
  proxmox_deploy
fi

ELAPSED_TIME=$(($SECONDS - $START_TIME))
echo "Deployed in: $(($ELAPSED_TIME/60)) min $(($ELAPSED_TIME%60)) sec" 
echo -e "${TC}------------------------------------------------------------${NC}"
echo

echo -e "The ${TC}kube-config${NC} file can be found at clusters/${TC}${CLUSTER_PKG_FOLDER}/kube-config${NC}"
echo 
echo -e "${TC}kubectl --kubeconfig=clusters/${CLUSTER_PKG_FOLDER}/kube-config get pods --all-namespaces${NC}"
echo 
echo -e "To connect to the Kubernetes Dashboard:"
echo
echo -e "${TC}kubectl --kubeconfig=clusters/${CLUSTER_PKG_FOLDER}/kube-config proxy${NC}"
echo
echo -e "Then open:"
echo -e "${TC}http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/${NC}"
echo

echo -e "Enjoy your ${TC}${CLUSTER_TYPE_NAME}${NC}!"
echo
echo -e "${TC}------------------------------------------------------------${NC}"
echo


  